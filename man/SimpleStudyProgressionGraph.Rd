% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/progressionGraph.R
\name{SimpleStudyProgressionGraph}
\alias{SimpleStudyProgressionGraph}
\title{Create a \code{ProgressionGraph} describing a simple disease progression clinical trial}
\usage{
SimpleStudyProgressionGraph(arms, armProgression, edges = "immediate",
  crossOvers = NULL, visitSchedule = NULL, isVisitNode = FALSE)
}
\arguments{
\item{arms}{a vector of arm names}

\item{armProgression}{a vector of states subjects experience
for example "progressing", "progressed". This vector should not include the "death" state}

\item{edges}{determines which edges are to be added for arm
must be one of \code{"none","immediate","death","all"}. \code{none}: no edges added
\code{immediate}: must progress sequentially through all states \code{death}: must progress
sequentially through all states or go straight to death \code{all}: can jump straight to any
state (always progressing towards death)}

\item{crossOvers}{a vector containing additional transitions of the form \code{c("fromnode1","tonode1","fromnode2","tonode2")}}

\item{visitSchedule}{Either a \code{VisitSchedule} object which is the visit schedule to
be used for the nodes of this Progression Graph or \code{NULL} if no visit schedule is being used (or visit Schedule is
to be added later). Note the node 'death' will have the same visit schedule, which should not cause problems.}

\item{isVisitNode}{A logical value. Are the nodes `visit' nodes, i.e. node for which the transition into it is unknown
until the next visit. If TRUE then all nodes in the graph are visit nodes, if false then none are. The function
\code{\link{SetIsVisitNode.ProgressionGraph}} can be used to change the isVisitNode status of individual nodes}
}
\value{
An object of type \code{ProgressionGraph} which details the transition
states of study
}
\description{
This function creates the transition state graph for clinical trials with arbitrary number of 
arms, disease progression states and crossovers, returning an object of type \code{ProgressionGraph}.
The disease progression and possible transitions must be the same for each arm and no drop out state is included.
}
\details{
If more complicated disease progression transitions are required then this function can be used in conjunction 
with \code{\link{AddArm.ProgressionGraph}}, \code{\link{AddEdge.ProgressionGraph}}, \code{\link{AddNode.ProgressionGraph}}

The Weibull shape parameter for the rates for each node will be 1, 
to change use \code{\link{SetShape.ProgressionGraph}}

The edges added by the crossOver argument default to having isResetEdge set to true (i.e. the 
patient switch times are reset when transitioning over this edge) This can be changed by calling
\code{\link{SetIsResetEdge.ProgressionGraph}}
}
\examples{
crossOver <- c("control.progressed","active.progressed")

SimpleStudyProgressionGraph(arms=c("control","active"),
                            armProgression=c("progressing","progressed"),
                            edge="immediate",
                            crossOver=crossOver)
}

